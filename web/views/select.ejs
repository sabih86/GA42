<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Select Questions - LLMReport</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --primary: #3B82F6;
      --primary-dark: #2563EB;
      --primary-light: #DBEAFE;
      --gray-50: #F8FAFC;
      --gray-100: #F1F5F9;
      --gray-200: #E2E8F0;
      --gray-300: #CBD5E1;
      --gray-600: #475569;
      --gray-700: #334155;
      --gray-900: #0F172A;
      --white: #FFFFFF;
      --success: #059669;
      --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
      --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      --radius: 8px;
      --radius-lg: 12px;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background: var(--gray-50);
      min-height: 100vh;
      padding: 2rem;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
    }

    .header {
      background: var(--white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow);
      padding: 2rem;
      margin-bottom: 2rem;
      text-align: center;
    }

    .header h1 {
      font-size: 2rem;
      font-weight: 700;
      color: var(--gray-900);
      margin-bottom: 0.5rem;
    }

    .header p {
      color: var(--gray-600);
      font-size: 1rem;
    }

    .keyword-section {
      background: var(--white);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow);
      margin-bottom: 2rem;
      overflow: hidden;
    }

    .keyword-header {
      background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
      color: var(--white);
      padding: 1.5rem 2rem;
      display: flex;
      align-items: center;
      justify-content: between;
    }

    .keyword-title {
      font-size: 1.25rem;
      font-weight: 700;
    }

    .keyword-msv {
      background: rgba(255, 255, 255, 0.2);
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.875rem;
      font-weight: 600;
      margin-left: auto;
    }

    .questions-grid {
      padding: 2rem;
      display: grid;
      gap: 1rem;
    }

    .question-item {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      padding: 1rem;
      border: 2px solid var(--gray-200);
      border-radius: var(--radius);
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .question-item:hover {
      border-color: var(--primary-light);
      background: var(--gray-50);
    }

    .question-item.selected {
      border-color: var(--primary);
      background: var(--primary-light);
    }

    .question-checkbox {
      width: 1.25rem;
      height: 1.25rem;
      border: 2px solid var(--gray-300);
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      margin-top: 0.125rem;
      transition: all 0.2s ease;
    }

    .question-item.selected .question-checkbox {
      background: var(--primary);
      border-color: var(--primary);
      color: var(--white);
    }

    .question-checkbox i {
      font-size: 0.75rem;
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    .question-item.selected .question-checkbox i {
      opacity: 1;
    }

    .question-content {
      flex: 1;
    }

    .question-number {
      font-size: 0.75rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.25rem;
    }

    .question-text {
      color: var(--gray-700);
      line-height: 1.5;
    }

    .selection-counter {
      position: sticky;
      top: 2rem;
      background: var(--white);
      border: 2px solid var(--primary);
      border-radius: var(--radius-lg);
      padding: 1rem 1.5rem;
      margin-bottom: 2rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: var(--shadow);
    }

    .counter-info {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--gray-700);
      font-weight: 600;
    }

    .counter-number {
      background: var(--primary);
      color: var(--white);
      width: 2rem;
      height: 2rem;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
    }

    .submit-btn {
      background: var(--success);
      color: var(--white);
      border: none;
      border-radius: var(--radius);
      padding: 0.875rem 2rem;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      opacity: 0.5;
      pointer-events: none;
    }

    .submit-btn.enabled {
      opacity: 1;
      pointer-events: auto;
    }

    .submit-btn.enabled:hover {
      background: #047857;
      transform: translateY(-1px);
      box-shadow: var(--shadow);
    }

    .hidden-input {
      display: none;
    }

    @media (max-width: 768px) {
      body {
        padding: 1rem;
      }

      .header {
        padding: 1.5rem;
      }

      .header h1 {
        font-size: 1.5rem;
      }

      .keyword-header {
        padding: 1rem 1.5rem;
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .keyword-msv {
        margin-left: 0;
      }

      .questions-grid {
        padding: 1rem;
      }

      .selection-counter {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Select Questions for Analysis</h1>
      <p>Choose exactly 4 questions per keyword for your LLM analysis</p>
    </div>

    <form action="/select?runId=<%= runId %>" method="POST" id="selectionForm">
      <div class="selection-counter">
        <div class="counter-info">
          <div class="counter-number" id="totalSelected">0</div>
          <span>questions selected</span>
        </div>
        <button type="submit" class="submit-btn" id="submitBtn">
          <i class="fas fa-check"></i>
          Create Input File
        </button>
      </div>

      <% data.tasks.forEach(task => { %>
        <div class="keyword-section">
          <div class="keyword-header">
            <div class="keyword-title"><%= task.keyword %></div>
            <div class="keyword-msv">MSV: <%= task.msv.toLocaleString() %></div>
          </div>
          <div class="questions-grid">
            <% task.prompts.forEach((prompt, idx) => { %>
              <div class="question-item" data-keyword="<%= task.keyword %>">
                <div class="question-checkbox">
                  <i class="fas fa-check"></i>
                </div>
                <div class="question-content">
                  <div class="question-number">Question <%= idx + 1 %></div>
                  <div class="question-text"><%= prompt %></div>
                </div>
                <input 
                  type="checkbox" 
                  name="selected[<%= task.keyword %>]" 
                  value="<%= prompt %>" 
                  class="hidden-input"
                />
              </div>
            <% }) %>
          </div>
        </div>
      <% }) %>
    </form>
  </div>

  <script>
    const form = document.getElementById('selectionForm');
    const submitBtn = document.getElementById('submitBtn');
    const totalSelectedEl = document.getElementById('totalSelected');
    const questionItems = document.querySelectorAll('.question-item');
    const keywordSections = document.querySelectorAll('.keyword-section');
    
    // Track selections per keyword
    const selections = {};
    const maxPerKeyword = 4;
    
    // Initialize selections object
    keywordSections.forEach(section => {
      const keyword = section.querySelector('.keyword-title').textContent;
      selections[keyword] = 0;
    });

    function updateUI() {
      let totalSelected = 0;
      let allKeywordsComplete = true;
      
      // Count total selections and check if all keywords have 4 selections
      Object.values(selections).forEach(count => {
        totalSelected += count;
        if (count !== maxPerKeyword) {
          allKeywordsComplete = false;
        }
      });
      
      // Update counter
      totalSelectedEl.textContent = totalSelected;
      
      // Enable/disable submit button
      if (allKeywordsComplete) {
        submitBtn.classList.add('enabled');
      } else {
        submitBtn.classList.remove('enabled');
      }
      
      // Update keyword section headers to show progress
      keywordSections.forEach(section => {
        const keyword = section.querySelector('.keyword-title').textContent;
        const count = selections[keyword];
        const header = section.querySelector('.keyword-header');
        
        if (count === maxPerKeyword) {
          header.style.background = 'linear-gradient(135deg, #059669 0%, #047857 100%)';
        } else {
          header.style.background = 'linear-gradient(135deg, #3B82F6 0%, #2563EB 100%)';
        }
      });
    }

    // Add click handlers to question items
    questionItems.forEach(item => {
      const checkbox = item.querySelector('input[type="checkbox"]');
      const keyword = item.dataset.keyword;
      
      item.addEventListener('click', () => {
        const isCurrentlySelected = checkbox.checked;
        const currentCount = selections[keyword];
        
        if (!isCurrentlySelected && currentCount >= maxPerKeyword) {
          // Can't select more than 4 per keyword
          return;
        }
        
        // Toggle selection
        checkbox.checked = !isCurrentlySelected;
        item.classList.toggle('selected', checkbox.checked);
        
        // Update count
        if (checkbox.checked) {
          selections[keyword]++;
        } else {
          selections[keyword]--;
        }
        
        updateUI();
      });
    });

    // Prevent form submission if not all keywords have 4 selections
    form.addEventListener('submit', (e) => {
      const allComplete = Object.values(selections).every(count => count === maxPerKeyword);
      if (!allComplete) {
        e.preventDefault();
        alert('Please select exactly 4 questions for each keyword before proceeding.');
      }
    });

    // Initial UI update
    updateUI();
  </script>
</body>
</html>